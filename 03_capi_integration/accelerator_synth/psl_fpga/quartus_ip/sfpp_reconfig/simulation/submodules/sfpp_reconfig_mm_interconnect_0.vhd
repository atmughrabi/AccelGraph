-- sfpp_reconfig_mm_interconnect_0.vhd

-- This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 15.1 185

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sfpp_reconfig_mm_interconnect_0 is
	port (
		clk_0_clk_clk                                                  : in  std_logic                     := '0';             --                                                clk_0_clk.clk
		alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset : in  std_logic                     := '0';             -- alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset.reset
		master_0_clk_reset_reset_bridge_in_reset_reset                 : in  std_logic                     := '0';             --                 master_0_clk_reset_reset_bridge_in_reset.reset
		master_0_master_translator_reset_reset_bridge_in_reset_reset   : in  std_logic                     := '0';             --   master_0_master_translator_reset_reset_bridge_in_reset.reset
		master_0_master_address                                        : in  std_logic_vector(31 downto 0) := (others => '0'); --                                          master_0_master.address
		master_0_master_waitrequest                                    : out std_logic;                                        --                                                         .waitrequest
		master_0_master_byteenable                                     : in  std_logic_vector(3 downto 0)  := (others => '0'); --                                                         .byteenable
		master_0_master_read                                           : in  std_logic                     := '0';             --                                                         .read
		master_0_master_readdata                                       : out std_logic_vector(31 downto 0);                    --                                                         .readdata
		master_0_master_readdatavalid                                  : out std_logic;                                        --                                                         .readdatavalid
		master_0_master_write                                          : in  std_logic                     := '0';             --                                                         .write
		master_0_master_writedata                                      : in  std_logic_vector(31 downto 0) := (others => '0'); --                                                         .writedata
		alt_xcvr_reconfig_0_reconfig_mgmt_address                      : out std_logic_vector(6 downto 0);                     --                        alt_xcvr_reconfig_0_reconfig_mgmt.address
		alt_xcvr_reconfig_0_reconfig_mgmt_write                        : out std_logic;                                        --                                                         .write
		alt_xcvr_reconfig_0_reconfig_mgmt_read                         : out std_logic;                                        --                                                         .read
		alt_xcvr_reconfig_0_reconfig_mgmt_readdata                     : in  std_logic_vector(31 downto 0) := (others => '0'); --                                                         .readdata
		alt_xcvr_reconfig_0_reconfig_mgmt_writedata                    : out std_logic_vector(31 downto 0);                    --                                                         .writedata
		alt_xcvr_reconfig_0_reconfig_mgmt_waitrequest                  : in  std_logic                     := '0'              --                                                         .waitrequest
	);
end entity sfpp_reconfig_mm_interconnect_0;

architecture rtl of sfpp_reconfig_mm_interconnect_0 is
	component altera_merlin_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(31 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_lock                : in  std_logic                     := 'X';             -- lock
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component altera_merlin_master_translator;

	component altera_merlin_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(6 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component altera_merlin_slave_translator;

	signal master_0_master_translator_avalon_universal_master_0_waitrequest   : std_logic;                     -- alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_waitrequest -> master_0_master_translator:uav_waitrequest
	signal master_0_master_translator_avalon_universal_master_0_readdata      : std_logic_vector(31 downto 0); -- alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_readdata -> master_0_master_translator:uav_readdata
	signal master_0_master_translator_avalon_universal_master_0_debugaccess   : std_logic;                     -- master_0_master_translator:uav_debugaccess -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_debugaccess
	signal master_0_master_translator_avalon_universal_master_0_address       : std_logic_vector(31 downto 0); -- master_0_master_translator:uav_address -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_address
	signal master_0_master_translator_avalon_universal_master_0_read          : std_logic;                     -- master_0_master_translator:uav_read -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_read
	signal master_0_master_translator_avalon_universal_master_0_byteenable    : std_logic_vector(3 downto 0);  -- master_0_master_translator:uav_byteenable -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_byteenable
	signal master_0_master_translator_avalon_universal_master_0_readdatavalid : std_logic;                     -- alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_readdatavalid -> master_0_master_translator:uav_readdatavalid
	signal master_0_master_translator_avalon_universal_master_0_lock          : std_logic;                     -- master_0_master_translator:uav_lock -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_lock
	signal master_0_master_translator_avalon_universal_master_0_write         : std_logic;                     -- master_0_master_translator:uav_write -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_write
	signal master_0_master_translator_avalon_universal_master_0_writedata     : std_logic_vector(31 downto 0); -- master_0_master_translator:uav_writedata -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_writedata
	signal master_0_master_translator_avalon_universal_master_0_burstcount    : std_logic_vector(2 downto 0);  -- master_0_master_translator:uav_burstcount -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_burstcount

begin

	master_0_master_translator : component altera_merlin_master_translator
		generic map (
			AV_ADDRESS_W                => 32,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 32,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 1,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                    => clk_0_clk_clk,                                                      --                       clk.clk
			reset                  => master_0_master_translator_reset_reset_bridge_in_reset_reset,       --                     reset.reset
			uav_address            => master_0_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => master_0_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => master_0_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => master_0_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => master_0_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => master_0_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => master_0_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => master_0_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => master_0_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => master_0_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => master_0_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => master_0_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => master_0_master_waitrequest,                                        --                          .waitrequest
			av_byteenable          => master_0_master_byteenable,                                         --                          .byteenable
			av_read                => master_0_master_read,                                               --                          .read
			av_readdata            => master_0_master_readdata,                                           --                          .readdata
			av_readdatavalid       => master_0_master_readdatavalid,                                      --                          .readdatavalid
			av_write               => master_0_master_write,                                              --                          .write
			av_writedata           => master_0_master_writedata,                                          --                          .writedata
			av_burstcount          => "1",                                                                --               (terminated)
			av_beginbursttransfer  => '0',                                                                --               (terminated)
			av_begintransfer       => '0',                                                                --               (terminated)
			av_chipselect          => '0',                                                                --               (terminated)
			av_lock                => '0',                                                                --               (terminated)
			av_debugaccess         => '0',                                                                --               (terminated)
			uav_clken              => open,                                                               --               (terminated)
			av_clken               => '1',                                                                --               (terminated)
			uav_response           => "00",                                                               --               (terminated)
			av_response            => open,                                                               --               (terminated)
			uav_writeresponsevalid => '0',                                                                --               (terminated)
			av_writeresponsevalid  => open                                                                --               (terminated)
		);

	alt_xcvr_reconfig_0_reconfig_mgmt_translator : component altera_merlin_slave_translator
		generic map (
			AV_ADDRESS_W                   => 7,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_0_clk_clk,                                                      --                      clk.clk
			reset                  => alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset,     --                    reset.reset
			uav_address            => master_0_master_translator_avalon_universal_master_0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => master_0_master_translator_avalon_universal_master_0_burstcount,    --                         .burstcount
			uav_read               => master_0_master_translator_avalon_universal_master_0_read,          --                         .read
			uav_write              => master_0_master_translator_avalon_universal_master_0_write,         --                         .write
			uav_waitrequest        => master_0_master_translator_avalon_universal_master_0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => master_0_master_translator_avalon_universal_master_0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => master_0_master_translator_avalon_universal_master_0_byteenable,    --                         .byteenable
			uav_readdata           => master_0_master_translator_avalon_universal_master_0_readdata,      --                         .readdata
			uav_writedata          => master_0_master_translator_avalon_universal_master_0_writedata,     --                         .writedata
			uav_lock               => master_0_master_translator_avalon_universal_master_0_lock,          --                         .lock
			uav_debugaccess        => master_0_master_translator_avalon_universal_master_0_debugaccess,   --                         .debugaccess
			av_address             => alt_xcvr_reconfig_0_reconfig_mgmt_address,                          --      avalon_anti_slave_0.address
			av_write               => alt_xcvr_reconfig_0_reconfig_mgmt_write,                            --                         .write
			av_read                => alt_xcvr_reconfig_0_reconfig_mgmt_read,                             --                         .read
			av_readdata            => alt_xcvr_reconfig_0_reconfig_mgmt_readdata,                         --                         .readdata
			av_writedata           => alt_xcvr_reconfig_0_reconfig_mgmt_writedata,                        --                         .writedata
			av_waitrequest         => alt_xcvr_reconfig_0_reconfig_mgmt_waitrequest,                      --                         .waitrequest
			av_begintransfer       => open,                                                               --              (terminated)
			av_beginbursttransfer  => open,                                                               --              (terminated)
			av_burstcount          => open,                                                               --              (terminated)
			av_byteenable          => open,                                                               --              (terminated)
			av_readdatavalid       => '0',                                                                --              (terminated)
			av_writebyteenable     => open,                                                               --              (terminated)
			av_lock                => open,                                                               --              (terminated)
			av_chipselect          => open,                                                               --              (terminated)
			av_clken               => open,                                                               --              (terminated)
			uav_clken              => '0',                                                                --              (terminated)
			av_debugaccess         => open,                                                               --              (terminated)
			av_outputenable        => open,                                                               --              (terminated)
			uav_response           => open,                                                               --              (terminated)
			av_response            => "00",                                                               --              (terminated)
			uav_writeresponsevalid => open,                                                               --              (terminated)
			av_writeresponsevalid  => '0'                                                                 --              (terminated)
		);

end architecture rtl; -- of sfpp_reconfig_mm_interconnect_0
